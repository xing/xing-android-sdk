/*
 * Copyright (c) 2015 XING AG (http://xing.com/)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * ============== Library configuration section ==============
 */

apply plugin: 'com.android.library'

android {

    compileSdkVersion project.ext.COMPILE_SDK_VERSION
    buildToolsVersion project.ext.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion project.ext.MIN_SDK_VERSION

        versionCode project.ext.VERSION_CODE
        versionName project.ext.VERSION
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2@jar'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    provided 'com.android.support:support-annotations:23.0.1'

    testCompile 'com.squareup.okhttp:mockwebserver:2.3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'commons-io:commons-io:2.4'
}

/*
 *  ============== Artifacts publishing section ==============
 */

import static org.gradle.internal.jvm.Jvm.current

apply plugin: 'maven'
apply plugin: 'signing'

ext {
    PROJECT_NAME = 'xing-android-sdk'
    ARTIFACT_ID = 'sdk'
    PACKAGING = 'aar'
}

def isSnapshot = VERSION.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('nexusUsername') ? nexusUsername : ""
def ossrhPassword = hasProperty('nexusPassword') ? nexusPassword : ""

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {

            name PROJECT_NAME
            groupId GROUP_ID
            artifactId ARTIFACT_ID
            version VERSION
            packaging PACKAGING

            description 'XING Android SDK'
            url 'https://github.com/xing/xing-android-sdk'

            scm {
                connection 'scm:git@github.com:xing/xing-android-sdk.git'
                developerConnection 'scm:git@github.com:xing/xing-android-sdk.git'
                url 'https://github.com/xing/xing-android-sdk'
            }

            licenses {
                license {
                    name 'XING Platform License'
                    url 'https://github.com/fxing/xing-android-sdk/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'xing-android'
                    name 'XING'
                }
            }
        }
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    if (current().getJavaVersion() == JavaVersion.VERSION_1_8) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}

/** Install artifacts to local maven repo */
task installArchives(type: Upload) {
    group 'upload'
    description 'Installs the artifacts to the local Maven repository.'
    configuration = configurations['archives']

    repositories {
        mavenDeployer {

            repository url: "file://${System.properties['user.home']}/.m2/repository"

            pom.project {

                name PROJECT_NAME
                groupId GROUP_ID
                artifactId ARTIFACT_ID
                version VERSION
                packaging PACKAGING
            }
        }
    }
}

/** Alter archiving tasks dependencies to run only after the code is compiled */
installArchives.dependsOn(assemble)
uploadArchives.dependsOn(build)

/*
 *  ============== Code coverage section ==============
 */

apply plugin: 'jacoco'

jacoco {
    toolVersion '0.7.2.201409121644'
}

/** Create a test coverage report */
task jacocoReport(type: JacocoReport, dependsOn: 'testDebug') {
    group = 'reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: [
                    '**/R*.class',
                    '**/BuildConfig*'
            ]
    )

    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebug.exec')

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
