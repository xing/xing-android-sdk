/*
 * Copyright (c) 2015 XING AG (http://xing.com/)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * ============== Library configuration section ==============
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion versions.COMPILE_SDK_VERSION
    buildToolsVersion versions.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion versions.MIN_SDK_VERSION

        versionCode = VERSION_CODE
        versionName = VERSION
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    provided libraries.supportAnnotations
    compile libraries.singpost
    compile libraries.okhttp
    compile libraries.okhttpUrlConnection

    testCompile libraries.mockWebServer
    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.robolectric
    testCompile libraries.commonsIo
}

/*
 *  ============== Artifacts publishing section ==============
 */
apply plugin: 'maven'
apply plugin: 'signing'

ext {
    POM_NAME = 'xing-android-sdk'
    POM_ARTIFACT_ID = 'sdk'
    POM_PACKAGING = 'aar'
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')

/*
 *  ============== Code coverage section ==============
 */

apply plugin: 'jacoco'

jacoco {
    toolVersion '0.7.2.201409121644'
}

/** Create a test coverage report */
task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: [
                    '**/R*.class',
                    '**/BuildConfig*'
            ]
    )

    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
